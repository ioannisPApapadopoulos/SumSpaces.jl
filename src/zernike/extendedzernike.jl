"""
ExtendedZernike{T}(a, b)

is a quasi-matrix representing extended Zernike functions on ‚Ñù. 

"""

#### 
# ExtendedZernike
####

struct ExtendedZernike{T} <: Basis{T}
    a::T
    b::T
    ExtendedZernike{T}(a, b) where T = new{T}(convert(T,a), convert(T,b))
end

ExtendedZernike(a::T, b::T) where T = ExtendedZernike{Float64}(a::T, b::T)

axes(P::ExtendedZernike{T}) where T = (Inclusion(‚Ñù^2),blockedrange(oneto(‚àû)))

==(P::ExtendedZernike, Q::ExtendedZernike) = P.a == Q.a && P.b == Q.b

function getindex(Z::ExtendedZernike{T},  xy::StaticVector{2}, j::Int)::T where T
    a, b = convert(T,Z.a), convert(T,Z.b)
    @assert a ‚âà 0
    s = b    # Fractional power
    d = 2    # Dimension of space

    bl = findblockindex(axes(Z,2), j)
    ‚Ñì = bl.I[1]-1 # degree
    k = bl.Œ±[1] # index of degree
    m = iseven(‚Ñì) ? k-isodd(k) : k-iseven(k) # Fourier mode
    n = (‚Ñì - m) √∑ 2
    ùê£ = isodd.(‚Ñì .- k)

    c1 = (4*one(T))^s*gamma(1+s+n)
    c2 = gamma((d+2*(m+s+n))/2) / (factorial(n)*gamma((d+2*(m+n))/2))


    xy in UnitDisk{T}() && return c1*c2*Zernike{T}(a, b)[xy, j]

    nrm = sqrt(convert(T,2)^(m+a+b+2-iszero(m))/œÄ) / sqrt((massmatrix(Jacobi{T}(b,a+m)).diag)[n+1])
    c3 = (-1)^n * gamma(d/2+m+n+s)/(gamma(-n-s)*gamma(d/2+m+2n+s+1))
    
    rŒ∏ = RadialCoordinate(xy)
    r, Œ∏ = rŒ∏.r, rŒ∏.Œ∏

    V = ùê£ == 1 ? r^m*cos(m*Œ∏) : r^m*sin(m*Œ∏)
    return c1*c3 * nrm * V * _‚ÇÇF‚ÇÅ(n+s+1,d/2+m+n+s,d/2+m+2n+s+1,one(T)/r^2) / (r^(d+2*(m+n+s)))
end

#### 
# ExtendedWeightedZernike
####

struct ExtendedWeightedZernike{T} <: Basis{T}
    a::T
    b::T
    ExtendedWeightedZernike{T}(a, b) where T = new{T}(convert(T,a), convert(T,b))
end


ExtendedWeightedZernike(a::T, b::T) where T = ExtendedWeightedZernike{Float64}(a::T, b::T)

axes(P::ExtendedWeightedZernike{T}) where T = (Inclusion(‚Ñù^2),blockedrange(oneto(‚àû)))
==(P::ExtendedWeightedZernike, Q::ExtendedWeightedZernike) = P.a == Q.a && P.b == Q.b

function getindex(P::ExtendedWeightedZernike{T}, xy::StaticVector{2}, j::Int)::T where T
    xy in UnitDisk{T}() && return Weighted(Zernike{T}(P.a, P.b))[xy,j]
    return zero(T)
end

###
# Fractional Laplacians
###

# function _coeff_zernike(s::T) where T
#     d = 2
#     k = mortar(Base.OneTo.(oneto(‚àû))) 
#     ‚Ñì = mortar(Fill.(oneto(‚àû),oneto(‚àû))) .- 1
#     m = k .- isodd.(k) .* iseven.(‚Ñì) .- iseven.(k) .* isodd.(‚Ñì) 
#     n = ‚Ñì .- m
#     T(4)^s*gamma.(1+s .+ n) .* gamma.((d.+2*(s.+‚Ñì)) ./ 2) ./ (factorial.(n).*gamma.((d.+s*‚Ñì) ./ 2))
# end

function *(L::AbsLaplacianPower, P::ExtendedZernike{T}) where T
    @assert axes(L,1) == axes(P,1) && P.a ‚âà 0 && P.b == -L.Œ±
    ExtendedWeightedZernike{T}(P.a,P.b)
end

function *(L::AbsLaplacianPower, Q::ExtendedWeightedZernike{T}) where T
    @assert axes(L,1) == axes(Q,1) && Q.a ‚âà 0 && Q.b == L.Œ±
    ExtendedZernike{T}(Q.a, Q.b)
end